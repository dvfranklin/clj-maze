<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1465422618578">{:repl-history {:ide [], :local [&quot;(create-rooms)&quot; &quot;(def rooms (range 10))&quot; &quot;(doseq [_ rooms]\n  (print \&quot; _\&quot;))\n(println)&quot; &quot;(get-in rooms [(dec 1) 0])&quot; &quot;(get-in rooms 0 0)&quot; &quot;(get-in rooms [0 0])&quot; &quot;(get-in rooms [0 -1])&quot; &quot;(possible-neighbors [rooms 0 0])&quot; &quot;(possible-neighbors rooms 0 0)&quot; &quot;(random-neighbor rooms 0 0)&quot; &quot;(assoc-in rooms [0 0 :bottom?] false)\n&quot; &quot;(map :start? rooms)&quot; &quot;(for [x rooms]\n  (println (map :start? x)))&quot; &quot;(for [x rooms]\n  (map :start? x))&quot; &quot;(count (filter true? (for [x rooms]\n                       (map :start? x))))&quot; &quot;(assoc-in rooms [9 9 :end?] true)&quot; &quot;(= 0 (count\n       (filter true? (for [x rooms]\n                       (map :end? x)))))&quot; &quot;(for [x rooms]\n  (map :end? x))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (= 0 (count (filter true? (for [x rooms]\n    (map :end? x))))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (count (filter true? (for [x rooms]\n    (map :end? x)))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (filter true? (for [x rooms]\n    (map :end? x))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (map (filter true? (for [x rooms]\n    (map :end? x)))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (first (filter true? (for [x rooms]\n    (map :end? x)))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (filter \&quot;true\&quot; (for [x rooms]\n    (map :end? x))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (filter true (for [x rooms]\n    (map :end? x))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (count (filter (= true (for [x rooms]\n    (map :end? x))))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (filter (= true (for [x rooms]\n    (map :end? x)))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (some #(= true %) (for [x rooms]\n    (map :end? x))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (contains? true (for [x rooms]\n    (map :end? x))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (some true? (for [x rooms]\n    (map :end? x))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (map (some true? (for [x rooms]\n    (map :end? x)))))&quot; &quot;(let [rooms (assoc-in rooms [9 9 :end?] true)]\n  (for [x rooms]\n    (map :end? x)))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints    (for [x rooms] (map :end? x))]&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints    (for [x rooms] (map :end? x))]\n  (map (some true? endpoints)))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints    (for [x rooms] (map :end? x))]\n  (some true? endpoints))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))]\n  (for [x endpoints]\n  (some true? x)))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))]\n  (for [x endpoints]\n    (map (some true? x))))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))]\n  (for [x endpoints]\n    (some true? x)))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))]\n  (for [x endpoints]\n    (some true? (some true? x))))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))]\n  (println endpoints))&quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))\n      truefalse     (for [x endpoints] (some true? x))]\n  (println truefalse))\n  &quot; &quot;(let [rooms         (assoc-in rooms [9 9 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))\n      truefalse     (for [x endpoints] (some true? x))]\n  (some true? truefalse))\n  &quot; &quot;(let [\n      endpoints     (for [x rooms] (map :end? x))\n      truefalse     (for [x endpoints] (some true? x))]\n  (some true? truefalse))\n  &quot; &quot;(print-stack-trace)&quot; &quot;(clojure.stacktrace/print-stack-trace)&quot; &quot;(def rooms create-rooms)&quot; &quot;rooms&quot; &quot;(rooms)&quot; &quot;(def rooms (create-rooms))&quot; &quot;(let [endpoints     (for [x rooms] (map :end? x))\n      truefalse     (for [x endpoints] (some true? x))]\n  (some true? truefalse))&quot; &quot;(let [rooms         (assoc-in rooms [1 1 :end?] true)\n      endpoints     (for [x rooms] (map :end? x))\n      truefalse     (for [x endpoints] (some true? x))]\n  (some true? truefalse))&quot; &quot;nil&quot; &quot;(if nil (println \&quot;hello\&quot;) (println \&quot;goodbye\&quot;))&quot; &quot;(-main)&quot;], :remote []}}</component>
</project>